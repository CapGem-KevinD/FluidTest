<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Marktek.Fluent.Testing.Engine</name>
    </assembly>
    <members>
        <member name="T:Marktek.Fluent.Testing.Engine.BuilderExtensions">
            <summary>
            /
            </summary>
        </member>
        <member name="T:Marktek.Fluent.Testing.Engine.Guard">
            <summary>
            Guard Class
            </summary>
        </member>
        <member name="M:Marktek.Fluent.Testing.Engine.Guard.AgainstNull``1(``0)">
            <summary>
            Guard Against T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MarkTek.Fluent.Testing.RecordGeneration.IRecordCreator`2">
            <summary>
            Test
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TID"></typeparam>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.IRecordCreator`2.CreateRecord">
            <summary>
            Creates a parent / aggregate record that children may be linked to.
            For No-SQL stores this will be used and CreateRelated would technically not be required
            </summary>
            <returns></returns>
        </member>
        <member name="T:MarkTek.Fluent.Testing.RecordGeneration.IRecordService`1">
            <summary>
            
            </summary>
            <typeparam name="TID"></typeparam>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.IRecordService`1.AssertAgainst``1(``0)">
            <summary>
            Uses a class that implements ISpecification to check the output of the record creation
            </summary>
            <typeparam name="TSpec"></typeparam>
            <param name="Specifications"></param>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.IRecordService`1.CreateRecord``1(MarkTek.Fluent.Testing.RecordGeneration.IRecordCreator{``0,`0})">
            <summary>
            Creates a record of type T where T is a class
            </summary>
            <typeparam name="T"></typeparam>
            <param name="implementation"></param>
            <returns></returns>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.IRecordService`1.CreateRelatedRecord``1(MarkTek.Fluent.Testing.RecordGeneration.IRelatedRecordCreator{``0,`0})">
            <summary>
            Creates a related record of type T where T is a class and passes in the previously created id from the CreateRecord method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="implementation"></param>
            <returns></returns>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.IRecordService`1.If(System.Boolean,System.Func{MarkTek.Fluent.Testing.RecordGeneration.IRecordService{`0},MarkTek.Fluent.Testing.RecordGeneration.IRecordService{`0}})">
            <summary>
            
            </summary>
            <param name="cond"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:MarkTek.Fluent.Testing.RecordGeneration.IRelatedRecordCreator`2">
            <summary>
            Creates a related record, this method should be called after the CreateRecordMethod on IRecordCreator
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TID"></typeparam>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.IRelatedRecordCreator`2.CreateRecord(`1)">
            <summary>
            Creates a record of Type T by passing in the previous id of the IRecordCreator.CreateRecord method
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MarkTek.Fluent.Testing.RecordGeneration.ISpecifcation">
            <summary>
            An interface that should be implemented to ensure the tests meet the expected criteria
            </summary>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.ISpecifcation.Validate">
            <summary>
            Validates against a set of created records, scenarios
            </summary>
        </member>
        <member name="T:MarkTek.Fluent.Testing.RecordGeneration.Record`2">
            <summary>
            Generic record class allowing for multiple data types
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TId"></typeparam>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.Record`2.#ctor">
            <summary>
            Protected Constructor
            </summary>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.Record`2.#ctor(`0,`1)">
            <summary>
            Constructor for Record where T class
            </summary>
            <param name="record"></param>
            <param name="id"></param>
        </member>
        <member name="P:MarkTek.Fluent.Testing.RecordGeneration.Record`2.Id">
            <summary>
            Id of the Entity
            </summary>
        </member>
        <member name="P:MarkTek.Fluent.Testing.RecordGeneration.Record`2.Row">
            <summary>
            Generic T where T is the actual data record / row
            </summary>
        </member>
        <member name="T:MarkTek.Fluent.Testing.RecordGeneration.RecordService`1">
            <summary>
            Base Record Service
            </summary>
            <typeparam name="TID"></typeparam>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.RecordService`1.CreateRecord``1(MarkTek.Fluent.Testing.RecordGeneration.IRecordCreator{``0,`0})">
            <summary>
            Creates a record implementing a class that implements IIRecordCreator<typeparamref name="TEntity"/>
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.RecordService`1.CreateRelatedRecord``1(MarkTek.Fluent.Testing.RecordGeneration.IRelatedRecordCreator{``0,`0})">
            <summary>
            Creates a releated record from the previous CreateRecordMethod
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.RecordService`1.AssertAgainst``1(``0)">
            <summary>
            Asserts a Configuration using a class that implements ISpecification
            </summary>
            <typeparam name="TSpec"></typeparam>
            <param name="spec"></param>
        </member>
        <member name="M:MarkTek.Fluent.Testing.RecordGeneration.RecordService`1.If(System.Boolean,System.Func{MarkTek.Fluent.Testing.RecordGeneration.IRecordService{`0},MarkTek.Fluent.Testing.RecordGeneration.IRecordService{`0}})">
            <summary>
            Execute method based on Condition. Useful for Scenarios where you want to configure the behaviour
            </summary>
            <param name="condition"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
    </members>
</doc>
