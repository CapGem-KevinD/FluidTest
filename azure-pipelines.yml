# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
  - stage : Build
    displayName: Build and Test
    jobs:
    - job: Build
      displayName: Build and Test
      steps:
      - task: NuGetToolInstaller@0
        displayName: 'Use NuGet 4.4.1'
        inputs:
          versionSpec: 4.4.1
          checkLatest: true

      - task: NuGetCommand@2
        displayName: 'NuGet restore'
        inputs:
          restoreSolution: '$(Parameters.solution)'

      - task: VSBuild@1
        displayName: 'Build solution **\*.sln'
        inputs:
          solution: '$(Parameters.solution)'
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet pack'
        inputs:
          command: pack
          packagesToPack: Engine/Marktek.Fluent.Testing.Engine.csproj
          versioningScheme: byBuildNumber

      - task: VSTest@2
        displayName: 'VsTest - testAssemblies'
        inputs:         
          runInParallel: true
          codeCoverageEnabled: true
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'
        enabled: false

      - task: CopyFiles@2
        displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
        inputs:
          SourceFolder: '$(system.defaultworkingdirectory)'
          Contents: '**\bin\$(BuildConfiguration)\**'
          TargetFolder: '$(build.artifactstagingdirectory)'
        condition: succeededOrFailed()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
        condition: succeededOrFailed()


  - stage: 'PublishNuget'
    displayName: 'Publish Prerelease NuGet Package'
    dependsOn: 'Build'
    condition: succeeded()
    jobs:
    - job:
      steps:
      - checkout: none
      - download: current

      - task: NuGetCommand@2
        displayName: 'NuGet push'
        inputs:
          command: push
          packagesToPush: '$(Pipeline.Workspace)/**/drop/*.nupkg'
          nuGetFeedType: external
          publishFeedCredentials: Nuget


        
